{"version":3,"sources":["components/Modal/Skill/Skill.module.scss","containers/PokemonContainer/PokemonContainer.module.scss","components/Filter/Filter.module.scss","components/Pagination/Pagination.module.scss","components/PokemonCard/PokemonCard.module.scss","App.module.scss","assets/images/Pokemon-LOGO.png","components/Logo/Logo.module.scss","components/Modal/Modal.module.scss","components/Modal/Backdrop/Backdrop.module.scss","components/Spinner/Spinner.module.scss","components/Button/Button.module.scss","components/Modal/CardWithDetails/CardWithDetails.module.scss","components/Logo/Logo.js","containers/Layout/Layout.js","components/Modal/Backdrop/Backdrop.js","components/Modal/Modal.js","components/Spinner/Spinner.js","components/Modal/Skill/Skill.js","components/Modal/CardWithDetails/CardWithDetails.js","store/actions/pokemons.js","store/actions/actionTypes.js","components/PokemonCard/PokemonCard.js","containers/PokemonContainer/PokemonContainer.js","components/Button/Button.js","components/Filter/Filter.js","components/Pagination/Pagination.js","App.js","serviceWorker.js","store/utility/utility.js","store/reducers/pokemonReducer.js","index.js"],"names":["module","exports","Logo","className","classes","src","PokemonLogo","alt","Layout","Fragment","this","props","children","Component","Backdrop","close","onClick","Modal","Spinner","Loader","Skill","statName","statValue","StatName","StatValue","OutsideSkillBar","InsideSkillBar","style","width","CardWithDetails","id","pokemon","fetchPokemonDescription","pokemonId","pokemonTypes","types","map","index","colors","spanStyle","color","border","margin","borderRadius","padding","fontWeight","key","type","name","charAt","toUpperCase","slice","skillsList","stats","stat","base_stat","description","loading","closeIcon","closeModal","icon","faTimes","size","sprites","front_default","PokemonName","PokemonId","PokemonDescription","pokemonDescription","PokemonInfoContainer","PokemonWeight","weight","height","pokemonType","SkillsContainer","DetailsCard","connect","state","error","errorWhileDescription","loadingDescription","dispatch","axios","get","then","response","descriptionText","data","flavor_text_entries","find","text","language","fetchPokemonDescriptionSuccess","flavor_text","catch","erorr","fetchPokemonDescriptionFail","actions","TYPE_COLORS","poison","grass","fire","flying","water","bug","normal","electric","ground","fairy","fighting","psychic","rock","ghost","ice","steel","dragon","dark","PokemonCard","clicked","backgroundsDependingOnTypeOfPokemon","pokemonBakground","forEach","push","splice","background","onMouseOver","e","target","back_default","onMouseOut","Info","DetailInfo","faWeightHanging","WeightHeight","faSortAmountUp","Details","Type","join","PokemonContainer","displayDetailInfo","closeDetailInfoHandler","detailInfoHandler","pokemonList","length","Message","modalWithDetails","Container","Button","bgStyle","filterTypes","Filter","showFilteringButtons","showButtons","filterType","filterBy","getStylesForButtons","includes","backgroundColor","typeButtonList","FilterContainer","filterBtn","faFilter","Pagination","pageCount","pageClick","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Active","App","showTypeButtons","pokemonsToDisplay","filterResult","pagination","offset","perPage","currentPage","setState","handlePageCount","pokemons","slicedPokemonsPerPage","console","log","Math","ceil","handlePageClick","selectedPage","selected","filterPokemons","filter","some","pokeType","every","handleFilterTypes","typeArray","findIndex","x","handleFilterChange","toLowerCase","prevState","fetchPokemonsInitial","prevProps","Promise","all","results","result","url","responses","singleResponse","fetchPokemonSuccess","fetchPokemonFail","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initialState","fetchPokemonStart","action","fetchPokemonDescriptionStart","pokemonReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0580555b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatName\":\"Skill_StatName__2PZma\",\"StatValue\":\"Skill_StatValue__DhIq_\",\"OutsideSkillBar\":\"Skill_OutsideSkillBar__36bgv\",\"InsideSkillBar\":\"Skill_InsideSkillBar__2VyYo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"PokemonContainer_Container__OK-x4\",\"Message\":\"PokemonContainer_Message__2GOwb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FilterContainer\":\"Filter_FilterContainer__3BDqt\",\"filterBtn\":\"Filter_filterBtn__2CcTD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__3voUI\",\"Active\":\"Pagination_Active__1GvoW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PokemonCard\":\"PokemonCard_PokemonCard__1qT04\",\"PokemonName\":\"PokemonCard_PokemonName__2Cl1d\",\"PokemonId\":\"PokemonCard_PokemonId__1RiuD\",\"Info\":\"PokemonCard_Info__Jj3bR\",\"WeightHeight\":\"PokemonCard_WeightHeight__1d9LJ\",\"Type\":\"PokemonCard_Type__2EGUl\",\"Details\":\"PokemonCard_Details__12cCY\",\"DetailInfo\":\"PokemonCard_DetailInfo__1yvSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3JxCj\"};","module.exports = __webpack_public_path__ + \"static/media/Pokemon-LOGO.0bda2da2.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__20Luo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__x9bJI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3zNaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1Sqv3\",\"load6\":\"Spinner_load6__7QeQf\",\"round\":\"Spinner_round__3J3G4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1nALt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DetailsCard\":\"CardWithDetails_DetailsCard__2uXV4\",\"PokemonName\":\"CardWithDetails_PokemonName__1OAi-\",\"PokemonId\":\"CardWithDetails_PokemonId__1rWT3\",\"PokemonDescription\":\"CardWithDetails_PokemonDescription__3fCAD\",\"PokemonInfoContainer\":\"CardWithDetails_PokemonInfoContainer__3ppHW\",\"PokemonWeight\":\"CardWithDetails_PokemonWeight__1bfin\",\"SkillsContainer\":\"CardWithDetails_SkillsContainer__1mXkD\",\"closeIcon\":\"CardWithDetails_closeIcon__2dNwn\"};","import React from 'react';\r\nimport PokemonLogo from '../../assets/images/Pokemon-LOGO.png';\r\nimport classes from './Logo.module.scss';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className={classes.Logo}>\r\n            <img src={PokemonLogo} alt=\"Page Logo Title\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logo;","import React, { Component } from 'react';\r\n\r\nimport Logo from '../../components/Logo/Logo';\r\n\r\nclass Layout extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Logo />\r\n                {this.props.children}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\n\r\nimport classes from './Backdrop.module.scss'\r\n\r\nconst Backdrop = ({close}) => {\r\n    return (\r\n        <div \r\n            onClick={close}\r\n            className={classes.Backdrop}></div>\r\n    );\r\n};\r\n\r\nexport default Backdrop;","import React from 'react';\r\n\r\nimport classes from './Modal.module.scss'\r\nimport Backdrop from './Backdrop/Backdrop';\r\n\r\nconst Modal = ({children, close}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Backdrop close={close}/>\r\n            <div className={classes.Modal}>\r\n                {children}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport classes from './Spinner.module.scss'\r\n\r\nconst Spinner = () => (\r\n    <div className={classes.Loader}>Loading...</div>\r\n);\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nimport classes from './Skill.module.scss';\r\n\r\nconst Skill = ({ statName, statValue}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <p className={classes.StatName}>{statName} <span className={classes.StatValue}>{statValue}</span></p>\r\n            <div className={classes.OutsideSkillBar}>\r\n                <div className={classes.InsideSkillBar} style={{width: `${statValue / 255 * 100}%`}}></div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Skill;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport classes from './CardWithDetails.module.scss';\r\nimport * as actions from '../../../store/actions/index';\r\nimport Spinner from '../../Spinner/Spinner';\r\nimport Skill from '../Skill/Skill';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass CardWithDetails extends Component {\r\n  componentDidMount() {\r\n    let id = this.props.pokemon.id;\r\n    this.props.fetchPokemonDescription(id);\r\n  }\r\n\r\n  render() {\r\n    const { pokemon } = this.props;\r\n    let pokemonId = null;\r\n    if (pokemon.id < 10) {\r\n      pokemonId = '#00' + pokemon.id;\r\n    } else if (pokemon.id >= 10 && pokemon.id < 100) {\r\n      pokemonId = '#0' + pokemon.id;\r\n    } else {\r\n      pokemonId = '#' + pokemon.id;\r\n    }\r\n\r\n    const pokemonTypes = pokemon.types.map((pokemonTypes, index) => {\r\n      const { colors } = this.props;\r\n      let spanStyle = {\r\n        color: `${colors[index]}`,\r\n        border: `2px solid ${colors[index]}`,\r\n        margin: '0px 5px',\r\n        borderRadius: '14px',\r\n        padding: '5px',\r\n        fontWeight: '900',\r\n      };\r\n      return (\r\n        <span key={index} style={spanStyle}>\r\n          {pokemonTypes.type.name.charAt(0).toUpperCase() +\r\n            pokemonTypes.type.name.slice(1)}\r\n        </span>\r\n      );\r\n    });\r\n\r\n    const skillsList = pokemon.stats.map(stat => {\r\n      return (\r\n        <Skill\r\n          statValue={stat.base_stat}\r\n          statName={stat.stat.name}\r\n          key={stat.stat.name}\r\n        />\r\n      );\r\n    });\r\n\r\n    let description = this.props.loading ? (\r\n      <Spinner />\r\n    ) : (\r\n      <React.Fragment>\r\n        <i className={classes.closeIcon} onClick={this.props.closeModal}>\r\n          <FontAwesomeIcon icon={faTimes} size='2x' />\r\n        </i>\r\n        <img src={pokemon.sprites.front_default} alt='' />\r\n        <h1 className={classes.PokemonName}>{pokemon.name}</h1>\r\n        <p className={classes.PokemonId}>{pokemonId}</p>\r\n        <p className={classes.PokemonDescription}>\r\n          {this.props.pokemonDescription}\r\n        </p>\r\n        <div className={classes.PokemonInfoContainer}>\r\n          <p className={classes.PokemonWeight}>Weight: {pokemon.weight}</p>\r\n          <p>Height: {pokemon.height}</p>\r\n        </div>\r\n        <div className={classes.PokemonInfoContainer}>\r\n          {pokemonTypes.map(pokemonType => pokemonType)}\r\n        </div>\r\n        <div className={classes.SkillsContainer}>{skillsList}</div>\r\n      </React.Fragment>\r\n    );\r\n\r\n    return <div className={classes.DetailsCard}>{description}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    pokemonDescription: state.pokemonDescription,\r\n    error: state.errorWhileDescription,\r\n    loading: state.loadingDescription,\r\n  };\r\n};\r\n\r\nconst dispatchStateToProps = dispatch => {\r\n  return {\r\n    fetchPokemonDescription: id => dispatch(actions.fetchDescriptionInit(id)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, dispatchStateToProps)(CardWithDetails);\r\n","import axios from 'axios';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const fetchPokemonStart = () => {\r\n  return {\r\n    type: actionTypes.FETCHING_DATA_START,\r\n  };\r\n};\r\n\r\nexport const fetchPokemonSuccess = pokemons => {\r\n  return {\r\n    type: actionTypes.FETCHING_DATA_SUCCESS,\r\n    pokemons: pokemons,\r\n  };\r\n};\r\n\r\nexport const fetchPokemonFail = error => {\r\n  return {\r\n    type: actionTypes.FETCHING_DATA_FAIL,\r\n    erorr: error,\r\n  };\r\n};\r\n\r\nexport const fetchPokemonInit = () => {\r\n  return dispatch => {\r\n    dispatch(fetchPokemonStart());\r\n    axios\r\n      .get('https://pokeapi.co/api/v2/pokemon?offset=0&limit=500')\r\n      .then(response => {\r\n        return Promise.all(\r\n          response.data.results.map(result => axios.get(result.url))\r\n        );\r\n      })\r\n      .then(responses => {\r\n        return responses.map(singleResponse => singleResponse.data);\r\n      })\r\n      .then(pokemons => {\r\n        console.log(pokemons);\r\n        dispatch(fetchPokemonSuccess(pokemons));\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchPokemonFail(error));\r\n      });\r\n  };\r\n};\r\n\r\n// export const fetchPokemonTypes = type => {\r\n//   return dispatch => {\r\n//     dispatch(fetchPokemonStart());\r\n//     axios\r\n//       .get(`https://pokeapi.co/api/v2/type/${type}`)\r\n//       .then(response => {\r\n//         return Promise.all(\r\n//           response.data.pokemon\r\n//             .slice(0, 20)\r\n//             .map(result => axios.get(result.pokemon.url))\r\n//         );\r\n//       })\r\n//       .then(responses => {\r\n//         return responses.map(singleResponse => singleResponse.data);\r\n//       })\r\n//       .then(pokemons => {\r\n//         dispatch(fetchPokemonSuccess(pokemons));\r\n//       })\r\n//       .catch(error => {\r\n//         dispatch(fetchPokemonFail(error));\r\n//       });\r\n//   };\r\n// };\r\n\r\nexport const fetchPokemonDescriptionStart = () => {\r\n  return {\r\n    type: actionTypes.FETCHING_DESCRIPTION_START,\r\n  };\r\n};\r\n\r\nexport const fetchPokemonDescriptionSuccess = descriptionText => {\r\n  return {\r\n    type: actionTypes.FETCHING_DESCRIPTION_SUCCESS,\r\n    text: descriptionText,\r\n  };\r\n};\r\n\r\nexport const fetchPokemonDescriptionFail = error => {\r\n  return {\r\n    type: actionTypes.FETCHING_DESCRIPTION_FAIL,\r\n    erorr: error,\r\n  };\r\n};\r\n\r\nexport const fetchDescriptionInit = id => {\r\n  return dispatch => {\r\n    dispatch(fetchPokemonDescriptionStart());\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon-species/${id}`)\r\n      .then(response => {\r\n        let descriptionText = response.data.flavor_text_entries.find(text => {\r\n          return text.language.name === 'en';\r\n        });\r\n        dispatch(fetchPokemonDescriptionSuccess(descriptionText.flavor_text));\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchPokemonDescriptionFail(error));\r\n      });\r\n  };\r\n};\r\n","export const FETCHING_DATA_START = 'FETCHING_DATA_START';\r\nexport const FETCHING_DATA_SUCCESS = 'FETCHING_DATA_SUCCESS';\r\nexport const FETCHING_DATA_FAIL = 'FETCHING_DATA_FAIL';\r\n\r\nexport const FETCHING_DESCRIPTION_START = 'FETCHING_DESCRIPTION_START';\r\nexport const FETCHING_DESCRIPTION_SUCCESS = 'FETCHING_DESCRIPTION_SUCCESS';\r\nexport const FETCHING_DESCRIPTION_FAIL = 'FETCHING_DESCRIPTION_FAIL';\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWeightHanging, faSortAmountUp } from '@fortawesome/free-solid-svg-icons';\r\nimport classes from './PokemonCard.module.scss';\r\n\r\nconst TYPE_COLORS = {\r\n    poison: '#C68CC6',\r\n    grass: '#AEDE96',\r\n    fire: '#F6B282',\r\n    flying: '#CABCF6',\r\n    water: '#A4BCF6',\r\n    bug: '#CAD479',\r\n    normal: '#CACAAE',\r\n    electric: '#FAE282',\r\n    ground: '#ECD9A4',\r\n    fairy: '#F4C1CD',\r\n    fighting: '#D9827E',\r\n    psychic: '#FA9AB7',\r\n    rock: '#D4C687',\r\n    ghost: '#A99AC1',\r\n    ice: '#C1E7E7',\r\n    steel: '#D4D4E2',\r\n    dragon: '#A886F9',\r\n    dark: '#A89990',\r\n  }\r\n\r\nconst PokemonCard = ({pokemon, clicked}) => {\r\n\r\n    const backgroundsDependingOnTypeOfPokemon = [];\r\n    let pokemonBakground = {};\r\n    pokemon.types.forEach((pokemonType, index) => {\r\n        if(index === 0) {\r\n            backgroundsDependingOnTypeOfPokemon.push(TYPE_COLORS[pokemonType.type.name]);\r\n            backgroundsDependingOnTypeOfPokemon.push(TYPE_COLORS[pokemonType.type.name]);\r\n        } else {\r\n            backgroundsDependingOnTypeOfPokemon.splice(1, 1, TYPE_COLORS[pokemonType.type.name]);\r\n        };\r\n        pokemonBakground = {background: `linear-gradient(45deg, ${backgroundsDependingOnTypeOfPokemon[0]} 50%, ${backgroundsDependingOnTypeOfPokemon[1]} 50%`};\r\n    })\r\n\r\n    let pokemonId = null;\r\n    if(pokemon.id < 10) {\r\n        pokemonId = '#00' + pokemon.id;\r\n    } else if (pokemon.id >= 10 && pokemon.id < 100) {\r\n        pokemonId = '#0' + pokemon.id;\r\n    } else {\r\n        pokemonId = '#' + pokemon.id;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={() => {clicked(pokemon, backgroundsDependingOnTypeOfPokemon)}}\r\n            className={classes.PokemonCard}\r\n            style={pokemonBakground}>\r\n            <img\r\n                onMouseOver={(e) => e.target.src = pokemon.sprites.back_default || \"https://img.icons8.com/bubbles/100/000000/no-image.png\"}\r\n                onMouseOut={(e) => e.target.src = pokemon.sprites.front_default || \"https://img.icons8.com/bubbles/100/000000/no-image.png\"}\r\n                src={pokemon.sprites.front_default || \"https://img.icons8.com/bubbles/100/000000/no-image.png\"} \r\n                alt=\"\"/>\r\n            <h1 className={classes.PokemonName}>{pokemon.name}</h1>\r\n            <p className={classes.PokemonId}>{pokemonId}</p>\r\n            <div className={classes.Info}>\r\n                <div className={classes.DetailInfo}>\r\n                    <i><FontAwesomeIcon icon={faWeightHanging} size=\"2x\"/></i>\r\n                    <span className={classes.WeightHeight}>{pokemon.weight}</span>\r\n                </div>\r\n                <div className={classes.DetailInfo}>\r\n                    <i><FontAwesomeIcon icon={faSortAmountUp} size=\"2x\"/></i>\r\n                    <span className={classes.WeightHeight}>{pokemon.height}</span>\r\n                </div>\r\n            </div>\r\n            <div className={classes.Details}>DETAILS</div>\r\n            <p className={classes.Type}>Type: {pokemon.types.map(pokemonType => \r\n                pokemonType.type.name.charAt(0).toUpperCase() + pokemonType.type.name.slice(1)).join('/')}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PokemonCard;","import React from 'react';\r\n\r\nimport classes from './PokemonContainer.module.scss';\r\nimport Modal from '../../components/Modal/Modal';\r\nimport CardWithDetails from '../../components/Modal/CardWithDetails/CardWithDetails';\r\nimport PokemonCard from '../../components/PokemonCard/PokemonCard';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\n\r\nconst PokemonContainer = ({\r\n  displayDetailInfo,\r\n  pokemon,\r\n  colors,\r\n  closeDetailInfoHandler,\r\n  detailInfoHandler,\r\n  data,\r\n  loading,\r\n}) => {\r\n  let pokemonList = null;\r\n  if (!data.length) {\r\n    pokemonList = (\r\n      <p className={classes.Message}>No results for selected filters!</p>\r\n    );\r\n  } else {\r\n    pokemonList = data.map(pokemon => {\r\n      return (\r\n        <PokemonCard\r\n          clicked={detailInfoHandler}\r\n          pokemon={pokemon}\r\n          key={pokemon.id}\r\n        />\r\n      );\r\n    });\r\n  }\r\n  let modalWithDetails = (\r\n    <Modal close={closeDetailInfoHandler}>\r\n      <CardWithDetails\r\n        closeModal={closeDetailInfoHandler}\r\n        pokemon={pokemon}\r\n        colors={colors}\r\n      />\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.Container}>\r\n      {loading ? <Spinner /> : pokemonList}\r\n      {displayDetailInfo ? modalWithDetails : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonContainer;\r\n","import React from 'react';\r\nimport classes from './Button.module.scss';\r\n\r\nconst Button = ({ children, clicked, name, bgStyle }) => {\r\n  return (\r\n    <button\r\n      onClick={e => {\r\n        clicked(children);\r\n      }}\r\n      className={classes.Button}\r\n      name={name}\r\n      style={bgStyle}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFilter } from '@fortawesome/free-solid-svg-icons';\r\nimport classes from './Filter.module.scss';\r\n\r\nimport Button from '../Button/Button';\r\nconst filterTypes = [\r\n  'normal',\r\n  'fighting',\r\n  'flying',\r\n  'poison',\r\n  'ground',\r\n  'rock',\r\n  'bug',\r\n  'ghost',\r\n  'steel',\r\n  'fire',\r\n  'water',\r\n  'grass',\r\n  'electric',\r\n  'psychic',\r\n  'ice',\r\n  'dragon',\r\n  'fairy',\r\n  'dark',\r\n];\r\nconst TYPE_COLORS = {\r\n  poison: '#C68CC6',\r\n  grass: '#AEDE96',\r\n  fire: '#F6B282',\r\n  flying: '#CABCF6',\r\n  water: '#A4BCF6',\r\n  bug: '#CAD479',\r\n  normal: '#CACAAE',\r\n  electric: '#FAE282',\r\n  ground: '#ECD9A4',\r\n  fairy: '#F4C1CD',\r\n  fighting: '#D9827E',\r\n  psychic: '#FA9AB7',\r\n  rock: '#D4C687',\r\n  ghost: '#A99AC1',\r\n  ice: '#C1E7E7',\r\n  steel: '#D4D4E2',\r\n  dragon: '#A886F9',\r\n  dark: '#A89990',\r\n};\r\n\r\nconst Filter = ({\r\n  showFilteringButtons,\r\n  showButtons,\r\n  filterType,\r\n  filterBy,\r\n}) => {\r\n  const getStylesForButtons = type => {\r\n    if (filterBy.includes(type)) {\r\n      return {\r\n        backgroundColor: TYPE_COLORS[type],\r\n      };\r\n    } else {\r\n      return {\r\n        backgroundColor: '',\r\n      };\r\n    }\r\n  };\r\n\r\n  let typeButtonList = null;\r\n  if (showButtons) {\r\n    typeButtonList = filterTypes.map((type, index) => {\r\n      return (\r\n        <Button\r\n          key={type + index}\r\n          clicked={filterType}\r\n          name={type}\r\n          bgStyle={getStylesForButtons(type)}\r\n        >\r\n          {type.toUpperCase()}\r\n        </Button>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className={classes.FilterContainer}>\r\n      <button onClick={showFilteringButtons} className={classes.filterBtn}>\r\n        <i>\r\n          <FontAwesomeIcon icon={faFilter} size='2x' />\r\n        </i>\r\n      </button>\r\n      {typeButtonList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport classes from './Pagination.module.scss';\r\n\r\nconst Pagination = ({ pageCount, pageClick }) => {\r\n  return (\r\n    <ReactPaginate\r\n      previousLabel={'‹'}\r\n      nextLabel={'›'}\r\n      breakLabel={'...'}\r\n      breakClassName={'break-me'}\r\n      pageCount={pageCount}\r\n      marginPagesDisplayed={2}\r\n      pageRangeDisplayed={5}\r\n      onPageChange={pageClick}\r\n      containerClassName={classes.Pagination}\r\n      subContainerClassName={'pages pagination'}\r\n      activeClassName={classes.Active}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actions from './store/actions/index';\r\nimport classes from './App.module.scss';\r\nimport Layout from './containers/Layout/Layout';\r\nimport PokemonContainer from './containers/PokemonContainer/PokemonContainer';\r\nimport Filter from './components/Filter/Filter';\r\nimport Pagination from './components/Pagination/Pagination';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    showTypeButtons: false,\r\n    type: [],\r\n    pokemonsToDisplay: [],\r\n    filterResult: true,\r\n    pagination: {\r\n      offset: 0,\r\n      perPage: 20,\r\n      currentPage: 0,\r\n      data: [],\r\n    },\r\n    displayDetailInfo: false,\r\n    pokemon: null,\r\n    colors: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchPokemonsInitial();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { type } = this.state;\r\n    const { pokemons } = this.props;\r\n    if (type !== prevState.type) {\r\n      // console.log('[UPDATED]', type);\r\n      this.filterPokemons(type);\r\n    }\r\n    if (pokemons !== prevProps.pokemons) {\r\n      this.handlePageCount();\r\n    }\r\n  }\r\n  detailInfoHandler = (pokemon, colors) => {\r\n    this.setState({\r\n      displayDetailInfo: true,\r\n      pokemon: pokemon,\r\n      colors: colors,\r\n    });\r\n  };\r\n\r\n  closeDetailInfoHandler = () => {\r\n    this.setState({\r\n      displayDetailInfo: false,\r\n    });\r\n  };\r\n\r\n  handlePageCount = () => {\r\n    const { offset, perPage } = this.state.pagination;\r\n    const { pokemonsToDisplay, filterResult } = this.state;\r\n    const { pokemons } = this.props;\r\n    let slicedPokemonsPerPage = [];\r\n    let pageCount = 1;\r\n\r\n    if (pokemonsToDisplay.length !== 0) {\r\n      console.log(offset);\r\n      slicedPokemonsPerPage = pokemonsToDisplay.slice(offset, offset + perPage);\r\n      pageCount = Math.ceil(pokemonsToDisplay.length / perPage);\r\n    } else if (pokemonsToDisplay.length === 0 && !filterResult) {\r\n      slicedPokemonsPerPage = [];\r\n    } else {\r\n      slicedPokemonsPerPage = pokemons.slice(offset, offset + perPage);\r\n      pageCount = Math.ceil(pokemons.length / perPage);\r\n    }\r\n    console.log(slicedPokemonsPerPage, 'sliced to display');\r\n    this.setState({\r\n      pagination: {\r\n        ...this.state.pagination,\r\n        pageCount: pageCount,\r\n        data: slicedPokemonsPerPage,\r\n      },\r\n    });\r\n  };\r\n\r\n  handlePageClick = e => {\r\n    const { perPage } = this.state.pagination;\r\n    const selectedPage = e.selected;\r\n    const offset = selectedPage * perPage;\r\n    this.setState(\r\n      {\r\n        pagination: {\r\n          ...this.state.pagination,\r\n          currentPage: selectedPage,\r\n          offset: offset,\r\n        },\r\n      },\r\n      () => {\r\n        this.handlePageCount();\r\n      }\r\n    );\r\n  };\r\n\r\n  filterPokemons = type => {\r\n    const { pokemons } = this.props;\r\n    // console.log('[FILTER POKEMONS FUNCTION]');\r\n    let pokemonsToDisplay = null;\r\n    let filterResult = true;\r\n    if (type.length === 0) {\r\n      // console.log('[GET Pokemons from initial state!]', type);\r\n      pokemonsToDisplay = pokemons;\r\n    } else if (type.length === 1) {\r\n      // console.log('[FILTER Pokemons from initial state!]', type);\r\n      pokemonsToDisplay = pokemons.filter(pokemon => {\r\n        if (pokemon.types.length > 1) {\r\n          return pokemon.types.some(pokeType =>\r\n            pokeType.type.name.includes(type[0])\r\n          );\r\n        }\r\n        return pokemon.types[0].type.name === type[0];\r\n      });\r\n    } else {\r\n      // console.log('[DOUBLE FILTERING Pokemons from initial state!]', type);\r\n      pokemonsToDisplay = pokemons.filter(pokemon => {\r\n        if (pokemon.types.length >= 2) {\r\n          return pokemon.types.every(pokeType =>\r\n            type.includes(pokeType.type.name)\r\n          );\r\n        }\r\n        return null;\r\n      });\r\n    }\r\n    if (pokemonsToDisplay.length === 0) {\r\n      // console.log('No results for those types!');\r\n      filterResult = false;\r\n    }\r\n    console.log(pokemonsToDisplay, '[Pokemons after filtering]', filterResult);\r\n\r\n    this.setState(\r\n      {\r\n        pokemonsToDisplay: pokemonsToDisplay,\r\n        filterResult: filterResult,\r\n        pagination: {\r\n          ...this.state.pagination,\r\n          offset: 0,\r\n        },\r\n      },\r\n      () => {\r\n        this.handlePageCount();\r\n      }\r\n    );\r\n  };\r\n\r\n  handleFilterTypes = type => {\r\n    console.log('[CHANGE TYPES IN STATE FUNCTION]');\r\n    let typeArray = [...this.state.type];\r\n    if (!typeArray.includes(type) && typeArray.length < 2) {\r\n      typeArray.push(type);\r\n    } else if (typeArray.includes(type)) {\r\n      typeArray.splice(\r\n        typeArray.findIndex(x => x === type),\r\n        1\r\n      );\r\n    } else if (typeArray.length >= 2 && !typeArray.includes(type)) {\r\n      typeArray.splice(1, 1, type);\r\n    }\r\n    this.setState({\r\n      type: typeArray,\r\n    });\r\n  };\r\n\r\n  handleFilterChange = type => {\r\n    console.log('[HANDLE TYPE CLICK!]');\r\n    const pokemonType = type.toLowerCase();\r\n    this.handleFilterTypes(pokemonType);\r\n  };\r\n\r\n  showFilteringButtons = () => {\r\n    this.setState(prevState => ({\r\n      showTypeButtons: !prevState.showTypeButtons,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={classes.App}\r\n        style={{ height: this.props.loading ? '100vh' : '100%' }}\r\n      >\r\n        <Layout>\r\n          <Filter\r\n            showFilteringButtons={this.showFilteringButtons}\r\n            showButtons={this.state.showTypeButtons}\r\n            filterType={this.handleFilterChange}\r\n            filterBy={this.state.type}\r\n          />\r\n          <PokemonContainer\r\n            data={this.state.pagination.data}\r\n            loading={this.props.loading}\r\n            detailInfoHandler={this.detailInfoHandler}\r\n            closeDetailInfoHandler={this.closeDetailInfoHandler}\r\n            colors={this.state.colors}\r\n            displayDetailInfo={this.state.displayDetailInfo}\r\n            pokemon={this.state.pokemon}\r\n          />\r\n          {!this.props.loading ? (\r\n            <Pagination\r\n              pageCount={this.state.pagination.pageCount}\r\n              pageClick={this.handlePageClick}\r\n            />\r\n          ) : null}\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    pokemons: state.pokemons,\r\n    loading: state.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchPokemonsInitial: () => dispatch(actions.fetchPokemonInit()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n}","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../utility/utility';\r\n\r\nconst initialState = {\r\n    pokemons: [],\r\n    loading: false,\r\n    error: false,\r\n    loadingDescription: false,\r\n    pokemonDescription: '',\r\n    errorWhileDescription: false\r\n}\r\n\r\nconst fetchPokemonStart = (state, action) => {\r\n    return updateObject(state, {\r\n        loading: true\r\n    });\r\n};\r\nconst fetchPokemonSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        pokemons: action.pokemons,\r\n        loading: false\r\n    });\r\n};\r\nconst fetchPokemonFail = (state, action) => {\r\n    return updateObject(state, {\r\n        error: true,\r\n        loading: false\r\n    });\r\n};\r\n\r\nconst fetchPokemonDescriptionStart = (state, action) => {\r\n    return updateObject(state, {\r\n        loadingDescription: true\r\n    });\r\n};\r\nconst fetchPokemonDescriptionSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        pokemonDescription: action.text,\r\n        loadingDescription: false\r\n    });\r\n};\r\nconst fetchPokemonDescriptionFail = (state, action) => {\r\n    return updateObject(state, {\r\n        errorWhileDescription: state.error,\r\n        loadingDescription: false\r\n    });\r\n};\r\n\r\nconst pokemonReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCHING_DATA_START: return fetchPokemonStart(state, action);\r\n        case actionTypes.FETCHING_DATA_SUCCESS: return fetchPokemonSuccess(state, action);\r\n        case actionTypes.FETCHING_DATA_FAIL: return fetchPokemonFail(state, action);\r\n        case actionTypes.FETCHING_DESCRIPTION_START: return fetchPokemonDescriptionStart(state, action);\r\n        case actionTypes.FETCHING_DESCRIPTION_SUCCESS: return fetchPokemonDescriptionSuccess(state, action);\r\n        case actionTypes.FETCHING_DESCRIPTION_FAIL: return fetchPokemonDescriptionFail(state, action);\r\n        default: return state;\r\n    }\r\n}\r\nexport default pokemonReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/reset.css';\r\nimport './styles/normalize.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport pokemonReducer from './store/reducers/pokemonReducer';\r\n\r\n\r\n\r\nconst store = createStore(pokemonReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}